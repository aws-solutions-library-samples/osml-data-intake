data_intake.utils
=================

.. py:module:: data_intake.utils


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/data_intake/utils/app_config/index
   /autoapi/data_intake/utils/logger/index


Attributes
----------

.. autoapisummary::

   data_intake.utils.logger


Classes
-------

.. autoapisummary::

   data_intake.utils.BotoConfig
   data_intake.utils.ServiceConfig
   data_intake.utils.AsyncContextFilter


Functions
---------

.. autoapisummary::

   data_intake.utils.get_minimal_collection_dict
   data_intake.utils.configure_logger


Package Contents
----------------

.. py:class:: BotoConfig

   BotoConfig is a dataclass meant to vend our application the set of boto client configurations required for
       Data Intake Bulk

   The data schema is defined as follows:
   default:  (Config) the standard boto client configuration


   .. py:attribute:: default
      :type:  botocore.config.Config


.. py:class:: ServiceConfig

   ServiceConfig is a dataclass meant to house the high-level configuration settings required for Data Intake Bulk to
   operate that are provided through ENV variables. Note that required env parameters are enforced by the implied
   schema validation as os.environ[] is used to fetch the values. Optional parameters are fetched using, os.getenv(),
   which returns None.

   The data schema is defined as follows:
   aws_region:  (str) The AWS region where the Bulk Ingest is deployed.
   sts_arn: (str) The ARN of the STS role to assume for running the Bulk Ingest.
   max_conn_pool: (int) The maximum number of connections to maintain in the connection pool.


   .. py:attribute:: aws_region
      :type:  str


   .. py:attribute:: sts_arn
      :type:  str


   .. py:attribute:: max_conn_pool
      :type:  str


   .. py:attribute:: bulk_s3_uri


   .. py:attribute:: bulk_input_path


   .. py:attribute:: bulk_output_path


   .. py:attribute:: bulk_output_bucket


   .. py:attribute:: bulk_stac_endpoint


   .. py:attribute:: bulk_collection_id


   .. py:attribute:: bulk_max_workers


   .. py:attribute:: bulk_enable_debugging


   .. py:attribute:: stac_post_processing_topic
      :type:  str


   .. py:attribute:: post_processing_asset_data_titles
      :type:  list


.. py:function:: get_minimal_collection_dict(collection_id: str) -> Dict

.. py:class:: AsyncContextFilter(attribute_names: List[str])

   Bases: :py:obj:`logging.Filter`


   This is a filter that injects contextual information into the log message. The contextual information is
   set using the static methods of this class.


   .. py:attribute:: attribute_names


   .. py:method:: filter(record: logging.LogRecord) -> bool

      This method is called for each log record. It injects the contextual information into the log record.

      :param record: the log record to filter
      :return: True, this filter does not exclude information from the log



   .. py:method:: set_context(context: Optional[dict]) -> None
      :staticmethod:


      Set the context for the current coroutine. If None, all context information is cleared.

      :param context: dict = the context to set
      :return: None



.. py:function:: configure_logger(logger: logging.Logger, log_level: int, log_formatter: logging.Formatter = None, log_filter: logging.Filter = None) -> logging.Logger

   Configure a given logger with the provided parameters.

   :param logger: An instance of the Logger to configure
   :param log_level: The log level to set
   :param log_formatter: The log formatter to set on all handlers
   :param log_filter: Log filter to apply to the logger

   :return: None


.. py:data:: logger

