data_intake.utils.logger
========================

.. py:module:: data_intake.utils.logger


Attributes
----------

.. autoapisummary::

   data_intake.utils.logger._LOG_CONTEXT
   data_intake.utils.logger.formatter
   data_intake.utils.logger.filter
   data_intake.utils.logger.logger


Classes
-------

.. autoapisummary::

   data_intake.utils.logger.AsyncContextFilter


Functions
---------

.. autoapisummary::

   data_intake.utils.logger.configure_logger
   data_intake.utils.logger.get_logger


Module Contents
---------------

.. py:data:: _LOG_CONTEXT

.. py:class:: AsyncContextFilter(attribute_names: List[str])

   Bases: :py:obj:`logging.Filter`


   This is a filter that injects contextual information into the log message. The contextual information is
   set using the static methods of this class.


   .. py:attribute:: attribute_names


   .. py:method:: filter(record: logging.LogRecord) -> bool

      This method is called for each log record. It injects the contextual information into the log record.

      :param record: the log record to filter
      :return: True, this filter does not exclude information from the log



   .. py:method:: set_context(context: Optional[dict]) -> None
      :staticmethod:


      Set the context for the current coroutine. If None, all context information is cleared.

      :param context: dict = the context to set
      :return: None



.. py:function:: configure_logger(logger: logging.Logger, log_level: int, log_formatter: logging.Formatter = None, log_filter: logging.Filter = None) -> logging.Logger

   Configure a given logger with the provided parameters.

   :param logger: An instance of the Logger to configure
   :param log_level: The log level to set
   :param log_formatter: The log formatter to set on all handlers
   :param log_filter: Log filter to apply to the logger

   :return: None


.. py:function:: get_logger(name: str = __name__, level: int = logging.INFO) -> logging.Logger

   Configures the logging setup for AWS Lambda.

   :param name: The name of the logger.
   :param level: The logging level to be used if no other handler is already configured. Default is INFO.

   :returns: The configured logger instance.


.. py:data:: formatter

.. py:data:: filter

.. py:data:: logger

